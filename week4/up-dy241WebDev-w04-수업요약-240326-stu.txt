'24/03/26 <dy241WebDev> 4주차 수업요약(stu)

[실습] 4주차
=================
[실습] 4주차

#공식 홈페이지
http://nodejs.org/

http://npmjs.com
http://expressjs.com

http://lodash.com/docs
================
cd c:\
cd C:\dev\dev\nodejs-ex\

C:\dev\dev\nodejs-ex
C:\dev\dev\nodejs-ex-stu
---------------------------
[강의] 4주차: 웹서버  http

    Client  ------------>    Server
              요청(req)
	 <-----------
                  응답(res)

cf) lodash
# http:   서버 생성 + 서버 실행 (리스닝)
            createServer()   listen()
//htp-ex.js
const http =requier('http');
const server = http.createServer((req, res) => {
	console.log("요청발생");
});

server.listen();

# express
================================
# 내부 모듈 vs. 외부 모듈

# 내부 모듈 : 실행 방법
>node 파일명;

# 외부 모듈 : 실행 방법
- VS에서 command prompt를 켜서 작업

1. 초기화
npm init
==========================
# Node (기본)
==========================            
[01myapp]

<윈도+r>  cmd 라고 입력
npm init

// (package.json 파일 내용 확인)

npm install express

// (package.json 파일 내용 확인)

node index.js

웹브라우저
http://localhost:3000
==========================
# 외부 모듈
==========================
http://npmjs.com
http://lodash.com/docs

# lodash
4.17.21

$ npm install lodash
------------------------------------------

==========================
// http 모듈
==========================
# Node.js 실행: http 모듈

1. node 실행환경
2. VS Code 편집
3. node 실행
4. 웹브라우저 에서 실행
   http://localhost:3000
------------------------------------------
/* http-ex.js/
const http = require('node:http');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  // res.setHeader('Content-Type', 'text/plain');
  res.setHeader('Content-Type', 'text/html');
  res.write('<h1>Hello, \n</h1>');
  res.write('Hello, \n');
  res.end('World!\n');
});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
});
------------
http://localhost:3000/
------------
-------------------------------------------

# API 테스팅 도구 : POSTMAN, thunder client (VS Code)

#RESTFul

GET /users
GET /users/:id

http://localhost/users/1
==========================
// express 모듈
==========================
=============================================
-Express: 웹서버 기능이 구현된 웹 프레임워크
1) 서버에 필요한 기능인 미들웨어를 애플리케이션에 추가
2) 라우팅 설정
3) 서버를 요청 대기 상태로 만들 수 있다

-라우팅(routing)
1) 요청 url 에 대해 적절한 핸들러 함수로 연결해 주는 기능
2) 애플리케이션의 get(), post() 메소드로 구현
3) 라우팅을 위한 전용 Router 틀래스를 사용할 수도 있다

app.METHOD(path, handler)

METHOD: http 요청 메소드 get, post, delete, put
path: 라우트 경로
handler: 실행 될 콜백함수

-요청 객체
1) 요청 객체(Request): 클라이언트 요청 정보를 담은 객체
2) http 모듈의 request 객체를 래핑한 것
3) req.params(), req.query(), req.body() 메소드 사용

-응답 객체
1) 응답 객체(Response): 클라이언트 응답 정보를 담은 객체
2) http 모듈의 response 객체를 래핑한 것
3) req.send(), req.status(), req.json() 메소드 사용

http://expressjs.com/ko/starter/hello-world.html

-HTTP 요청: 모든 자원은 명사로 식별
HTTP 경로로 자원을 요청

예)
GET /users
GET /users/{id}

-HTTP 메서드: 서버 자원에 대한 행동을 나타낸다(동사로 표현)
1) GET: 자원을 조회
2) POST: 자원을 생성
3) PUT: 자원을 갱신
4) DELETE: 자원을 삭제
------------------------------------------

------------------------------------------

------------------------------------------




